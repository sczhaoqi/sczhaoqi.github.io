<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[OS操作]]></title>
    <url>%2F2017%2F01%2F28%2F131%2F</url>
    <content type="text"><![CDATA[进程相关指令psps -aux获取当前所有的进程信息(系统,后台)|more //将指令输出的信息分屏显示kill:能够杀掉一个进程(自身权限范围内)kill -9 pid //强行杀掉某个进程 ================================================shell程序设计===============vivim是unix类操作系统的文本编辑器vi abc.txt//开始进入vi并创建打开abc.txt文档1.vi 按下i进入编辑模式的insert2.vi 按下esc进入命令状态3.vi 在命令模式下,按下: 进入命令行,可执行如w–存盘,q–退出 :q!//不保存强制退出 Shell程序设计==========================shell是os内核与用户之间的一种接口,是一种命令解释程序,用户指令要通过shell解释成os内核可以执行的命令,而os内核执行的返回结果也要通过shell树春程用户可以读懂的信息在屏幕上用户将一批多条指令集中写在一个程序中,交给shell来执行 shell程序,shell脚本目前在unix类型的操作系统中使用最多的是bash-B shell//shell的一个版本 shell编程基础一.shell变量1.用户自定义的变量:字符型,字符串型.没有专门的数字型的变量复制:变量名=变量值取消赋值:unsetset显示所有变量显示变量名 echo $2.系统变量unix系统中的一些系统保留的大写的关键性的变量:PATH//系统搜索目录 PWD …通过env指令,列出当前所有的系统变量.很多系统变量会在一些系统批处理文件中赋值,如:path vi /boot/.bash_profile 是root在系统每次登陆都会执行的批处理配置文件 =================================================================如何运行shell脚本 ./脚本名 参数—————————Linux的shell编程———————-$变量名===&gt;求得变量的值#注释符号1.shell是一种脚本程序shell用户自定义的变量直接赋值,无类型(字符串)–&gt;一般为小写变量名变量名=”值”;优点:方便,无需编译缺点:面对数字型应用时,必须通过特定的操作来进行转换. 位置变量 ========= $0~$9 获用户所输入的参数(紧跟在shell指令后的)$#,$$,$@,$!,$?(特色变量) 控制流条件表达式 [ 正则表达式 ] 左右有空格 ===&gt;[ 表达式1 -关键子 表达式2 ]常用正则表达式关键字-eq 数值相等-ne 数值不等-gt 大于 -ge 大于等于-lt 小于 -le 小于等于]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html5Canvas绘图]]></title>
    <url>%2F2016%2F12%2F20%2Fhtml5canvas-e7-bb-98-e5-9b-be%2F</url>
    <content type="text"><![CDATA[&lt;!DOCTYPE html&gt;&lt;html lang=”zh”&gt;&lt;head&gt;&lt;meta charset=”utf-8”&gt;&lt;style type=”text/css”&gt;body {text-align: center;}canvas{background:-webkit-linear-gradient(top,transparent39px,blue40px),-webkit-linear-gradient(left,transparent39px,blue40px);background-size:40px40px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;canvas id=”cds” width=”800”height=”600”style=”border:1px solid #c3c3c3”&gt;您的浏览器不支持canvas标签，请改为最新版本的chrome，firefox或Opera浏览器&lt;/canvas&gt;&lt;script type=”text/javascript”&gt;var mc=document.getElementById(“cds”);var w=mc.width;var h=mc.height;var centerw=20;var centerh=h-20;function drawgrid(){var ele=document.getElementById(“cds”);var ctx=ele.getContext(“2d”);var g_h=20;var g_w=20;var g_r=h/g_h;var g_c=w/g_w;//绘图ctx.beginPath();for(var i=0;i&lt;=g_r;i++){ctx.moveTo(0,ig_h);ctx.lineTo(w,ig_h);}for(var i=0;i&lt;=g_c;i++){ctx.moveTo(ig_w,0);ctx.lineTo(ig_w,h);}ctx.lineWidth=0.2;ctx.strokeStyle=”green”;ctx.stroke();};function drawcds(){var c=document.getElementById(“cds”);var ctx=c.getContext(“2d”); ctx.beginPath();ctx.font=”20px Georgia”;//原点ctx.fillText(“O(0,0)”,centerw,centerh+10);//画出y轴ctx.moveTo(centerw,0);ctx.lineTo(centerw-10,10);ctx.moveTo(centerw,0);ctx.lineTo(centerw+10,10);ctx.moveTo(centerw,0);ctx.lineTo(centerw,h);ctx.fillText(“y轴”,20,20);//画出x轴ctx.moveTo(w,centerh);ctx.lineTo(w-10,centerh-10);ctx.moveTo(w,centerh);ctx.lineTo(w-10,centerh+10);ctx.moveTo(0,centerh);ctx.lineTo(w,centerh);ctx.fillText(“x轴”,w-40,h-20);ctx.lineWidth=1; ctx.strokeStyle=”#000000”;ctx.stroke();};function viewX(x){return x2+centerw;}function viewY(y){return centerh-y2;}function drawtest(){var c=document.getElementById(“cds”);var ctx=c.getContext(“2d”);ctx.moveTo(viewX(0),viewY(0));ctx.lineTo(viewX(100),viewY(100));ctx.lineWidth=1; ctx.strokeStyle=”#000000”;ctx.stroke();}function init(){drawgrid();drawcds();drawtest();};window.onload=init;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Handler的总结]]></title>
    <url>%2F2016%2F09%2F17%2Fhandler-e7-9a-84-e6-80-bb-e7-bb-93%2F</url>
    <content type="text"><![CDATA[# Android开发中Handler的经典总结当应用程序启动时，Android首先会开启一个主线程(也就是UI线程)，主线程为管理界面中的UI控件，进行事件分发。一、Handler的定义：主要接受子线程发送的数据， 并用此数据配合主线程更新UI。解释：当应用程序启动时，Android首先会开启一个主线程 (也就是UI线程) ， 主线程为管理界面中的UI控件， 进行事件分发， 比如说， 你要是点击一个 Button ，Android会分发事件到Button上，来响应你的操作。 如果此时需要一个耗时的操作，例如: 联网读取数据， 或者读取本地较大的一个文件的时候，你不能把这些操作放在主线程中，如果你放在主线程中的话，界面会出现假死现象， 如果5秒钟还没有完成的话，会收到Android系统的一个错误提示 “强制关闭”。 这个时候我们需要把这些耗时的操作，放在一个子线程中，因为子线程涉及到UI更新，，Android主线程是线程不安全的， 也就是说，更新UI只能在主线程中更新，子线程中操作是危险的。 这个时候，Handler就出现了。，来解决这个复杂的问题 ，由于Handler运行在主线程中(UI线程中)， 它与子线程可以通过Message对象来传递数据， 这个时候，Handler就承担着接受子线程传过来的(子线程用sedMessage()方法传弟)Message对象，(里面包含数据) ， 把这些消息放入主线程队列中，配合主线程进行更新UI。二、Handler一些特点handler可以分发Message对象和Runnable对象到主线程中， 每个Handler实例，都会绑定到创建他的线程中(一般是位于主线程)，它有两个作用：(1)安排消息或Runnable 在某个主线程中某个地方执行；(2)安排一个动作在不同的线程中执行。Handler中分发消息的一些方法post(Runnable)postAtTime(Runnable，long)postDelayed(Runnable long)sendEmptyMessage(int)sendMessage(Message)sendMessageAtTime(Message，long)sendMessageDelayed(Message，long)以上post类方法允许你排列一个Runnable对象到主线程队列中，sendMessage类方法， 允许你安排一个带数据的Message对象到队列中，等待更新。三、Handler实例子类需要继承Hendler类，并重写handleMessage(Message msg) 方法， 用于接受线程数据。以下为一个实例，它实现的功能为：通过线程修改界面Button的内容1. public class MyHandlerActivity extends Activity {2. Button button;3. MyHandler myHandler;4.5. protected void onCreate(Bundle savedInstanceState) {6. super。onCreate(savedInstanceState);7. setContentView(R。layout。handlertest);8.9. button = (Button) findViewById(R。id。button);10. myHandler = new MyHandler();11. // 当创建一个新的Handler实例时， 它会绑定到当前线程和消息的队列中，开始分发数据12. // Handler有两个作用， (1) : 定时执行Message和Runnalbe 对象13. // (2): 让一个动作，在不同的线程中执行。14.15. // 它安排消息，用以下方法16. // post(Runnable)17. // postAtTime(Runnable，long)18. // postDelayed(Runnable，long)19. // sendEmptyMessage(int)20. // sendMessage(Message);21. // sendMessageAtTime(Message，long)22. // sendMessageDelayed(Message，long)23.24. // 以上方法以 post开头的允许你处理Runnable对象25. //sendMessage()允许你处理Message对象(Message里可以包含数据，)26.27. MyThread m = new MyThread();28. new Thread(m)。start();29. }30.31. /*32. 接受消息，处理消息 ，此Handler会与当前主线程一块运行33. /34.35. class MyHandler extends Handler {36. public MyHandler() {37. }38.39. public MyHandler(Looper L) {40. super(L);41. }42.43. // 子类必须重写此方法，接受数据44. @Override45. public void handleMessage(Message msg) {46. // TODO Auto-generated method stub47. Log。d(“MyHandler”， “handleMessage。。。。。。”);48. super。handleMessage(msg);49. // 此处可以更新UI50. Bundle b = msg。getData();51. String color = b。getString(“color”);52. MyHandlerActivity。this。button。append(color);53.54. }55. }56.57. class MyThread implements Runnable {58. public void run() {59.60. try {61. Thread。sleep(10000);62. } catch (InterruptedException e) {63. // TODO Auto-generated catch block64. e。printStackTrace();65. }66.67. Log。d(“thread。。。。。。。”， “mThread。。。。。。。。”);68. Message msg = new Message();69. Bundle b = new Bundle();// 存放数据70. b。putString(“color”， “我的”);71. msg。setData(b);72.73. MyHandlerActivity。this。myHandler。sendMessage(msg); // 向Handler发送消息，更新UI74.75. }76. }77. }]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[常见题型]]></title>
    <url>%2F2016%2F09%2F17%2Fe5-b8-b8-e8-a7-81-e9-a2-98-e5-9e-8b%2F</url>
    <content type="text"><![CDATA[#### category的作用category可以添加新的方法将类的实ps现分散到多个不同文件或多个不同框架中创建对私有方法的前向引用 强制卸载已安装软件需要的参数 rpm -e –nodeBroadcastReceiver作用是用来接收广播Intent的一个广播Inten可以被多个订阅了此广播的BroadcastReceiver所接收对有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者接收者声明的优先级别在&lt; intent-filter &gt;的android:priority属性中声明，数值越大优先级别越高 IPv6地址占16个字节 128位 IPv4 32位 4个字节]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[赵祺的个人失物招领网站上线了!!]]></title>
    <url>%2F2016%2F09%2F14%2Fe8-b5-b5-e7-a5-ba-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-a4-b1-e7-89-a9-e6-8b-9b-e9-a2-86-e7-bd-91-e7-ab-99-e4-b8-8a-e7-ba-bf-e4-ba-86%2F</url>
    <content type="text"><![CDATA[赵祺的个人失物招领网站上线了!!]]></content>
      <categories>
        <category>公告</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hashmap HashTable]]></title>
    <url>%2F2016%2F09%2F14%2Fhashmap-hashtable%2F</url>
    <content type="text"><![CDATA[1,hashmap允许存在null的key,hashtable不允许 2.Hashtable是基于线程的,线程安全,可同步;Hashmap不安全 3.HashTable的默认大小为11 增长为2old+1;’HashMap默认大小为16 增长为2; 4.Hash值的使用 Hashtable直接使用对象的Hash值 HashTable同步时,只允许一个线程对其进行修改 1.实现HashMap的同步 Map m=Collections.synchronized(new HashMap()); 用Collections的synchronized()方法创建同步的map对象,同时封装HashMap的方法 2.解释自定义HashMap的Key伪重复 自定义的对象作为key时, hashmap 首先检测对象的hashcode()是否相同,在hashcode相同的情况下,继续调用equals()方法判断,此时若相等则返回true,覆盖 即便是,自定义对象作为key时,要注意重写hashCode()方法和equals方法,及toString()方法; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry; class MyHashKey{ int id; String name; public MyHashKey(int id,String name){ this.id=id; this.name=name; } @Override public String toString() { return &quot;&quot;+this.id+this.name; } @Override public int hashCode() { return (&quot;&quot;+this.id).hashCode(); } @Override public boolean equals(Object arg0) { MyHashKey myHashKey=(MyHashKey) arg0; if (myHashKey.name.equals(this.name)) { return true; } else { return false; } } } public class Main { public static void main(String[] args) { // TODO Auto-generated method stub HashMap&amp;lt;MyHashKey, String&amp;gt; hashMap=new HashMap&amp;lt;MyHashKey, String&amp;gt;(); hashMap.put(new MyHashKey(1, &quot;key1&quot;), &quot;value1&quot;); hashMap.put(new MyHashKey(2, &quot;key2&quot;), &quot;value2&quot;); hashMap.put(new MyHashKey(1, &quot;key3&quot;), &quot;value3&quot;); for (Iterator iterator = hashMap.entrySet().iterator(); iterator.hasNext();) { Map.Entry entry=(Entry) iterator.next(); MyHashKey key = (MyHashKey) entry.getKey(); String value=(String) entry.getValue(); System.out.println(&quot;key=&quot;+key+&quot; value=&quot;+value); } } } `&lt;/pre&gt; 代码解析 1.比较hashcode 即便是int的id的值,对象1,对象2!=对象1,对象3!=对象2 对象3=对象1;这里可以确定对象1,对象2的key不同 2.调用对象3的equals方法,比较对象1,此时返回值为false,说明对象1和对象3的可以不同 ![](http://121.42.216.198/wordpress/wp-content/uploads/2016/09/6a0a16b29f3a577fd01f46fbb163535f.png) 如果将对象3改为 &lt;pre class=&quot;pure-highlightjs&quot;&gt;`hashMap.put(new MyHashKey(1, &quot;key1&quot;), &quot;value3&quot;); 结果为]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ArrayList Vector LinkedList]]></title>
    <url>%2F2016%2F09%2F14%2Farraylist-vector-linkedlist%2F</url>
    <content type="text"><![CDATA[共同点:都是可伸缩长度的数组 ArrayList:obj[] array(与vector) 默认扩充长度1.5倍(不提供修改方法) 线程不安全 Vector: 同ArrayList 默认扩充2倍 (提供修改方法) 线程安全 效率低于 ArrayList LinkedList:双向链表结构,只是方便插入 线程不安全]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA 容器 Collection && 迭代器Iterator]]></title>
    <url>%2F2016%2F09%2F14%2Fjava-e5-ae-b9-e5-99-a8-collection%2F</url>
    <content type="text"><![CDATA[分类:ListQueueSetStackMap 常用特点 set 元素不能重复,保证equals的值唯一:常用有HashSet和TreeSet(实现SortedSet,有序的) List 有序的,可重复的,对插入和删除进行有效的控制:常用的有LinkedList ArrayList Vector Map key-&gt;value key不同value可以相同:常用有 HashMap //基于散列表,便于查询 TreeMap//基于红黑树,按需排列 Iterator用于遍历并选择序列中的对象, 用法:序列对象.Iterator()方法 返回一个Iterator的对象,Iterator对象集合可以对其进行hasNext(),next();获取其中的OBJ,同时可以remove()将取出的对象从源集合对象中移除 注意:在Iterator遍历过程中不要使用其他的操作,改变ModCount,否则会抛出异常(只限使用Iterator对象的remove()方法) 引申:ListIterator支持左右遍历和元素的修改]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java NextInt() 后 取出NextLine();]]></title>
    <url>%2F2016%2F09%2F13%2F92%2F</url>
    <content type="text"><![CDATA[在调用了nextInt()后，我们可以先调用一次nextLine(),将该行剩下的内容抛弃； int option = input.nextInt();input.nextLine(); // Consume newline left-overString str1 = input.nextLine();` 全部都使用nextLine()读入，然后将其读入的数据转换为Integer。`int option = 0;try { &lt;span class=&quot;hljs-built_in&quot;&gt;option&lt;/span&gt; = Integer.parseInt(input.nextLine()); } catch (NumberFormatException e) { e.printStackTrace(); }String str1 = input.nextLine();]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[排序]]></title>
    <url>%2F2016%2F09%2F13%2Fe6-8e-92-e5-ba-8f%2F</url>
    <content type="text"><![CDATA[1. 快速排序 介绍： 快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。 步骤： 从数列中挑出一个元素，称为 “基准”（pivot）， 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。排序效果： &nbsp; 2. 归并排序介绍： 归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用 步骤： 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列 设定两个指针，最初位置分别为两个已经排序序列的起始位置 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 重复步骤3直到某一指针达到序列尾 将另一序列剩下的所有元素直接复制到合并序列尾排序效果： &nbsp; 3. 堆排序介绍： 堆积排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆性质：即子结点的键值或索引总是小于（或者大于）它的父节点。 步骤： （比较复杂，自己上网查吧） 排序效果： &nbsp; 4. 选择排序介绍： 选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕。 排序效果： &nbsp; 5. 冒泡排序介绍： 冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 步骤： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。排序效果： &nbsp; 6. 插入排序介绍： 插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 步骤： 从第一个元素开始，该元素可以认为已经被排序 取出下一个元素，在已经排序的元素序列中从后向前扫描 如果该元素（已排序）大于新元素，将该元素移到下一位置 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 将新元素插入到该位置中 重复步骤2排序效果： （暂无） &nbsp; 7. 希尔排序介绍： 希尔排序，也称递减增量排序算法，是插入排序的一种高速而稳定的改进版本。 希尔排序是基于插入排序的以下两点性质而提出改进方法的： 1、插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率 2、但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位&gt; 排序效果：]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA 运行环境]]></title>
    <url>%2F2016%2F09%2F13%2Fjava-e8-bf-90-e8-a1-8c-e7-8e-af-e5-a2-83%2F</url>
    <content type="text"><![CDATA[java从上至下的运行环境: java JRE/JVM OS 硬件 java源代码 编译器–&gt;java字节码 .class文件-&gt;jvm执行 java执行方式 1,即时编译执行:字节码全部编译成机器码,再执行 2.解释执行 :编译器执行一小段代码,来完成java字节码的所有操作]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA对象持久化方式]]></title>
    <url>%2F2016%2F09%2F13%2Fjava-e5-af-b9-e8-b1-a1-e6-8c-81-e4-b9-85-e5-8c-96-e6-96-b9-e5-bc-8f%2F</url>
    <content type="text"><![CDATA[1.序列化(serialization) serializable 中static 的对象/变量不被序列化 一般用于网络,数据库,文件存储的保存 2.外部序列化(Externalizable接口) 需要完成读写过程,自由度更高]]></content>
      <categories>
        <category>新生入学</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[专有名词]]></title>
    <url>%2F2016%2F09%2F13%2Fe4-b8-93-e6-9c-89-e5-90-8d-e8-af-8d%2F</url>
    <content type="text"><![CDATA[NIO 非阻塞IO 多线程操作时,进程阻塞(等待某个条件的发生),耗费大量的上下文栈空间,降低运行效率 NIO原理:通过selector.channel.buffer实现非阻塞的IO操作 通过selector 来轮询channel注册的事件是否发生,对应传回selection的对象,可以用buffer来存储数据,不需要切换上下文,已不需要压弹栈 具有较高的执行效率]]></content>
      <categories>
        <category>新生入学</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[IO流的实现机制]]></title>
    <url>%2F2016%2F09%2F13%2Fio-e6-b5-81-e7-9a-84-e5-ae-9e-e7-8e-b0-e6-9c-ba-e5-88-b6%2F</url>
    <content type="text"><![CDATA[输入输出:抽象流 基类InputStream 常用:StringBufferInputStream FileinputStream FilterInputSream(封装类的基类) java中的流分类 字符流 继承制writer/reader 字节流 继承自InputStream/OutputStream]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Exception]]></title>
    <url>%2F2016%2F09%2F13%2Fexception%2F</url>
    <content type="text"><![CDATA[Error 和Exception同属Thorwable的子类 Error 直接退出程序 Exception分两类 1.检查异常 IOException SQLException 2.运行异常 NullPointException.ArithmeticException等 异常若不处理,则会向上抛出,直到处理为止(程序/线程终止) 多线程Thread.run()抛出,单线程main()抛出,主程序抛出,则程序终止 注意事项 1.异常必须先捕获子类,再捕获基类,否则子类不会执行 2.尽早处理 3.自定义异常 继承 Exception 4.异常要么处理,要么抛出]]></content>
      <categories>
        <category>java学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Finally代码块]]></title>
    <url>%2F2016%2F09%2F13%2Ffinally-e4-bb-a3-e7-a0-81-e5-9d-97%2F</url>
    <content type="text"><![CDATA[//finally代码的执行性//原则性 1.所有的函数代码一定在return 之前执行//原则性2.finally块一定会执行,(强制退出System.exit除外)//原则性3.finally中的return会覆盖try/catch之中的return//原则性4.try catch中的return 会将返回的对象保存下来,即便是在finally中修改对象值返回结果就会改变//但是如果是非引用类型,则不会对返回结果有任何的影响 public class Test { @SuppressWarnings(&quot;finally&quot;) public static int testFinally(){ try { return 1; } catch (Exception e) { // TODO: handle exception return 0; }finally{ System.out.println(&quot;finally 执行&quot;); return -1; } } public static void testFinally3(){ try { System.out.println(&quot;try 执行&quot;); System.exit(0); } catch (Exception e) { // TODO: handle exception System.out.println(&quot;catch 执行&quot;); }finally{ System.out.println(&quot;finally 执行&quot;); } } @SuppressWarnings(&quot;finally&quot;) public static int testFinally2(){ int m; try { m=1; return m; } catch (Exception e) { m=0; // TODO: handle exception return m; }finally{ m=3; System.out.println(&quot;finally 执行&quot;); } } public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;T1&quot;); int m=testFinally(); System.out.println(m); System.out.println(&quot;T2&quot;); m=testFinally2(); System.out.println(m); System.out.println(&quot;T3&quot;); testFinally3(); } } &nbsp;]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String StringBuffer StringBuilder StringTokenizer区别]]></title>
    <url>%2F2016%2F09%2F13%2Fstring-stringbuffer-stringbuilder-stringtokenizer-e5-8c-ba-e5-88-ab%2F</url>
    <content type="text"><![CDATA[String ,StringBuffer,StringBuilder位于java.lang中不用引入 1.String 字符串 不可变类 执行修改时,会有较多的转换操作,并耗费空间 String s=&quot;hello&quot;;s+=&quot;world&quot;;&amp;lt;===&amp;gt; StringBuffer sb=new StringBuffer(s);sb.append(&quot;world&quot;);s=sb.tostring();`&lt;/pre&gt; 2.StringBuffer StringBuilder带缓冲区的字符串类 StringBuilder 应对于 单线程的多修改字符串 StringBuffer 安全性更高 多线程的多修改字符串 3.StringTokenizer 位于工具内中 &lt;pre class=&quot;pure-highlightjs&quot;&gt;`java.util.StringTokenizer; st.hasMoreTokens(); st.nextToken(); &nbsp; &nbsp;]]></content>
      <categories>
        <category>新生入学</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[java取整]]></title>
    <url>%2F2016%2F09%2F12%2Fjava-e5-8f-96-e6-95-b4%2F</url>
    <content type="text"><![CDATA[System.out.println(&quot;round&quot;+Math.round(1.5)); System.out.println(&quot;ceil&quot;+Math.ceil(1.5)); System.out.println(&quot;floor&quot;+Math.floor(1.5)); System.out.println(&quot;round&quot;+Math.round(-1.5)); System.out.println(&quot;ceil&quot;+Math.ceil(-1.5)); System.out.println(&quot;floor&quot;+Math.floor(-1.5)); System.out.println(&quot;小技巧:退一法&quot;+Math.round(Math.floor(1.5)));`&lt;/pre&gt; &lt;pre class=&quot;pure-highlightjs&quot;&gt;`设x=1,y=2,z=3, y+=z- -/++x的值是 y+=z- -/++x相当于y=y+z- -/++x 然后相当于y=2+3/2=3 &nbsp;]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA浅拷贝&深拷贝]]></title>
    <url>%2F2016%2F09%2F12%2Fjava-e6-b5-85-e6-8b-b7-e8-b4-9d-e6-b7-b1-e6-8b-b7-e8-b4-9d%2F</url>
    <content type="text"><![CDATA[先看一个demo public class Test { public static void changeString(StringBuffer ss1,StringBuffer ss2){ ss1.append(&quot;B&quot;); ss2=ss1; } public static void main(String[] args) { StringBuffer s1=new StringBuffer(&quot;A&quot;); StringBuffer s2=new StringBuffer(&quot;B&quot;); changeString(s1, s2); System.out.println(s1); System.out.println(s2); } } `&lt;/pre&gt; 运行结果 AB B 分析: 运行时,s1和s2的地址作为参数传递 ss1存放的s1的地址,ss1.append==s1.append; ss2=ss1将s1的地址赋给ss2这个临时的地址,对s2的指向没有任何影响 &lt;!--more--&gt; **另外一个例子** &lt;pre class=&quot;pure-highlightjs&quot;&gt;`String s1=&quot;abc&quot;; String s2=&quot;abc&quot;; String s3=new String(&quot;abc&quot;); String s4=new String(&quot;abc&quot;); s1,s2的指向实际是一个地址 根据flyweight的设计模式 指向常量区的abc s1==s2 :true; s3==s4:false; s1.equals(s3):true; ==比较内存地址 equals 比较对应地址中的值 hashcode() 比较对象地址 S3,s4则被放入了堆中,它们的指向也就不同,分别指向创建时所分配的内存地址]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抽象类与接口]]></title>
    <url>%2F2016%2F09%2F12%2Fe6-8a-bd-e8-b1-a1-e7-b1-bb-e4-b8-8e-e6-8e-a5-e5-8f-a3%2F</url>
    <content type="text"><![CDATA[下面看一个网上流传最广泛的例子：门和警报的例子：门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念： abstract class Door { public abstract void open(); public abstract void close(); }`&lt;/pre&gt; 或 &lt;pre class=&quot;pure-highlightjs&quot;&gt;`interface Door { public abstract void open(); public abstract void close(); }`&lt;/pre&gt; &amp;nbsp; 但是现在如果我们需要门具有报警alarm( )的功能，那么该如何实现？下面提供两种思路： 将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能； 将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的open( )和close( )，也许这个类根本就不具备open( )和close( )这两个功能，比如火灾报警器。从这里可以看出， Door的open() 、close()和alarm()根本就属于两个不同范畴内的行为，open()和close()属于门本身固有的行为特性，而alarm()属于延伸的附加行为。因此最好的解决办法是单独将报警设计为一个接口，包含alarm()行为,Door设计为单独的一个抽象类，包含open和close两种行为。再设计一个报警门继承Door类和实现Alarm接口。`interface Alram { void alarm(); } abstract class Door { void open(); void close(); } class AlarmDoor extends Door implements Alarm { void oepn() { //.... } void close() { //.... } void alarm() { //.... } } &nbsp;]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目开发介绍]]></title>
    <url>%2F2016%2F08%2F27%2Fapp%2F</url>
    <content type="text"><![CDATA[APP华师一路通 主要功能: 华中师范大学 校园导航 分类查看 常用点查询 7、8、9号楼楼内导航（指向：左右） 开发者 华中师范大学 计算机学院2013级 陈俊宇 李青云 田奇峰 赵祺 指导老师 杨青 版本历史 2016年8月27日 测试版本1.0(内部测试版本) 2016年8月28日 测试版本1.1(内部测试版本) 修改主界面布局 与搜索界面 添加QQ临时对话按钮 2016年9月3日 测试版本1.2 加入语音,新增设置界面,将联系我们 移到此界面 特别鸣谢付灵芝]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新生入学须知(八项)]]></title>
    <url>%2F2016%2F08%2F23%2Fhello-world-1%2F</url>
    <content type="text"><![CDATA[新生入学须知(八项) 内容来源 (Q群 华师四川老乡会 276669130) 一、关于军训 军训一般有晨练，在早上六点半左右开始，然后七点多一点解散吃早饭，上午大概是8.00-11-30，下午大概是2.30-5.30，可能略有差异，毕竟远离军训挺久了，根据学院不同可能还会有晚训，当然晚上相对于白天会比较轻松凉快一点。在军训期间，训练必须穿迷彩或者军衬（每天到底穿什么辅导员会说的）还要带上你们的贝雷帽（妹子红色，汉子绿色）。军训服装是在你们网上新生报到的网站里面会进行选择的（两件迷彩短袖，一件军衬，两条裤子，一双军胶，一个贝雷帽），军训的时候只能穿军胶，但是这个鞋穿着容易硌脚，我们一般会去买卫生巾垫在下面，垫几层看你们自己具体情况，如果害羞，你去超市问鞋垫在哪，阿姨能明白你想要什么的。军训期间最好不要弄各种装饰挂件什么的，弄了也会被要求取下来（鞋架不能放鞋，书架不能放书，怎么东西少怎么来）。能军训后买的就军训后再买。军训按照学院进行分组，一个学院一个连，里面分排（一个方阵）就看各学院安排了，一般按照班级的顺序来，由于男生过少，男生可能会全部集中在一个排。 &nbsp; &nbsp; 二．关于交通 华师坐落在桂子山上，所以有很多坡，出行一般靠校车（一元一次），或者是学校内有可以租的小黄车（价格非常便宜），一般上课去最远的教学楼步行20分钟，不建议购买自行车，坡太多太累，而且上下课时间人也特别多，还会被偷。校外，北门西门东门出去都有地铁站，也有公交，去各个地方也都挺方便的。 前往华师的路上：武汉天河机场离华师有点远，一般会坐机场大巴再转公交来学校。打的的话，据说大概要120rmb左右。最好留出2个小时左右在路途上，因为武汉爱堵车：【强推】武汉有3个火车站，分别是武汉站、武昌站和汉口站。武昌站：离华师最近的火车站，坐地铁即可到达华师。但需要转线，从4号线到2号线，大致花费25min左右。武汉站：离华师较远的火车站，也可坐地铁到达华师，需要转线，从4号线到2号线。大致花费40min左右。汉口站：离华师较远的火车站，地铁一趟直达，坐2号线即可，适合不爱辗转波折的小伙伴，大致花费40min左右。华师所在的地铁站（均在2号线上）：街道口（西门）、广埠屯（北门）、虎泉（东门） 华师校内日常行走华师地势崎岖，多陡坡。如：绝望坡2333 所以不建议大家购买自行车，坡多骑行较累，而且上下课人流量大，容易被偷。想骑行可以租用小黄车。日常在校园中，主要依靠的交通工具：校车（长相似景区观光车）、小黄车、双脚。校车：一元一次，新生貌似可以凭录取通知书在报道前后免费。且校区可中途停车，具体可咨询各个院的志愿者。两条线路：北门——东门（寝室：东区、元宝山）北门——南门（寝室：西区、国交）小黄车：是ofo共享单车在华师的运营，在校园内可以租借使用，但会收取一定的费用，价格低廉，每天使用上限为2元。使用时，也请大家多爱护。双脚：华师整体来说不大，最远的路线（如：元宝山到国交）也就半个小时左右，所以在校园内可以多多使用双脚交通工具，方便快捷，便宜健身。 3.外出游玩周边交通发达，有多路公交和地铁可供选择，但是武汉是堵城，所以可选择地铁出行。相对周边学校较多，学生数量大，地铁也很挤。十一之类的慎重出行！！！&nbsp; &nbsp; 三、关于宿舍 关于宿舍分配，基本是一个学院的都在一栋楼，具体楼栋由你们辅导员抽签决定，然后在规定的可选的宿舍范围内进行选择，可以选哪间宿舍以及床号。所以在水群是可以先找一个专业的抱团，在开始网上选宿舍的时候一起选一个。 &nbsp; 宿舍条件，宿舍都有空调（除了林勘，但是林勘应该不会让你们住了），没独卫（除了国交），两头都有洗澡间，西区1-6貌似只有一边可以洗澡，（我们有一边洗澡间只能洗冷水，不知道其他的怎么样，热水洗澡需要水卡，在宿管那买），厕所和洗漱池。打热水在一楼以及中上的楼层都会有，所以太高楼层的也不必都去一楼打热水。同理洗衣机也是一样，洗衣机洗衣服需要投入三颗硬币。（两颗也行，不过洗的时间大大缩短）。宿舍大部分是四人间，以及少量的六人间，都是上床下桌，不比担心六人间，六人间的人均面积比四人间的人均大，条件也会好一点。 &nbsp; 宿舍分为两个电路，一个空调电路和宿舍用电，空调电路一直不断电，但要先充钱再用，充钱的行政楼副楼。宿舍用电，一个宿舍每个月学校提供30度左右，超出的自己交电费。宿舍会在晚上十一点半断电，早上六点来电。个别研究生混住楼栋不断电。在五一到国庆期间，由于天气太热，均不断电。 &nbsp; 关于门禁，女生十一点，男生十一点半。 &nbsp; &nbsp; 四、关于饮食 ㈠关于食堂首先，华师有七大食堂，其中西区有桂香园食堂，博雅园食堂，东区有学子餐厅，东一食堂，东二食堂，沁园春食堂，北区有北区食堂。你见过有观光电梯的食堂吗？没有？那一定要来华师最高大上的食堂——桂香园食堂来一睹真容啦。桂香楼一楼三餐时间均开放，面食居多，其招牌五谷鱼粉更是吸引众人前去品尝。当然一楼的米饭窗口小米先生也还是不错的。桂香园二楼以主食为多，只在午餐及晚餐时间营业。至于三楼嘛大家有机会可以去试一下其余的六家食堂我不是很了解。但也还是知道东二食堂好吃又实惠，学子的麻辣烫不错，东一二楼的烤肉饭很美味的呀~。。……然后从大众了解到:沁园春食堂不怎么好吃，北区食堂很便宜但味道也不行。。总之每个食堂大家都可以去尝试，总有一个食堂，总有一个窗口，适合你～㈡华师周边华师位于街道口亚贸商圈，附近购物场所云集，当然也少不了吃饭的地方。消费水平比较高的是西门外的创意城(用餐场所集中在八、九楼)，乐天城(一、二、三楼，其中一楼主打小吃)，群光广场负一楼，百脑汇(四、五楼)，还有西门外街道对面的美食汇(请原谅我忘了名字T^T)。然后是东门外面的虎泉，这里有虎泉青年酒店楼上的好一点的地方，也有街边摊，大排档，总有一款适合你的味蕾走到南门，你们就到了四川人聚餐的聚集地啦，南门川胖子是很多人喜欢聚餐的地方(说不定我们开学聚餐也会订在那里哟)还有，别忘了东南门外的小吃呀，虽然只是街边摊，但真的很美味㈢武汉武汉热干面很出名，但它不一定适合咋们四川人的口味，不过也还是欢迎小鲜肉们去尝试~武汉的周黑鸭，你不会后悔的~武汉的苕面窝占甘薯粉，本地人说很好吃，我没试过，大家也可以去试试~粮道街的串串，五福煎包，相信你们会喜欢~户部巷，小吃的聚集地(我不知道具体咋样)，大家可以去试一试~江汉路，武汉人推荐的吃货的好去处~(武汉好吃的地方很多，我在这里是讲不完的啦～它还有很多地方在等待你们的挖掘，小鲜肉们赶快来加入我们，和我们一群寻找味蕾的美好体验吧[期待脸]) &nbsp; 五、关于开学考试 对于大部分的小鲜肉来说，开学会有两次考试，一次英语考试，一次计算机考试。当然啦，英语专业的孩纸们不用考英语，计科的孩纸们不用考计算机。 &nbsp; 英语考试为四级题型，大家可以提前熟悉一下，尤其是听力(血的教训(&gt;_&lt;))，一定要注意时间分配和答题技巧(具体技巧可以对照题型百度一下，就不一一举例啦)。这个考试的成绩是作为以后英语学习分级的依据哒，大家还是要重视的。 &nbsp; 英语分为三个级，发展级、提高级、基础级。发展级的孩纸只用学一个学期的大学英语，然后可以自己选英语课上，同理，提高级学两个学期的大学英语，然后可以选英语课，基础级学三个学期。 &nbsp; 发展级的一个福利是(^V^)可以在大一上就考四级(相信学姐，一般情况下，高考的英语水平就是你的巅峰，所以…你们懂的)，提高级在大一下可以考，基础级就要在大二上考了。考过发展级就可以考四级啦~(≧▽≦)/~ &nbsp; 还有计算机考试，题型大致分为基础题和操作题，基础题是单选多选判断，考察基础的计算机知识，大家可以百度一下题库噢。操作题就是Office操作，大家可以趁暑假自己摸索一下。然后还有一些很简单的发邮件啊、查 考过的宝宝就会获得直接拿到两个学分的福利噢。没有考过的也没事儿，开学之后修一下计算机课就可以啦(不过要多交￥200，每周多上两大节课=_=)，所以大家还是好好准备吧。 &nbsp; 最后还会有一些特殊的分班考试，比如数经交叉班啊，法经交叉班啊，基地班等等等…(详情请咨询相应学院的学长学姐哈)^O^这个考试是自愿报名参加的，不强求。 &nbsp; 另外，以上所说的所有的考试都会在军训期间的晚上进行，大家做好准备噢，加油！\^O^/ &nbsp; 六、关于教学楼和教室 教学楼分为1-10号楼以及教师教育学院楼（A楼），逸夫化学楼，科学会堂还有YY（YY是上英语听力的楼），以及音乐学院，y楼 。一般教室为四个数字，例如8411,8代表八号楼，4代表4楼，11就是对应的楼层的教室，每个教室都会有门牌号的，对于9号楼，会有9-11,9-21，代表负一楼，负二楼。A102就是A楼，教师教学学院。1号楼是马院，历史几个学院的综合楼，2号楼是文院，3号楼是外院，5是生科院，6号楼是数统，七号八号是综合楼，你们大部分的课在7.8.9号楼。9是计算机，物院等几个院的综合，10是美术，城环等等。 &nbsp; 七、关于学校旁边酒店 ه北门正对面就是如家酒店广埠屯地铁站店，环境一般，价格稍微偏贵；北门出去往武商量贩走有一家莫泰168，环境和性价比都还不错；武商量贩旁边有一家布丁酒店，房间很小，一般一个房间只能住一个人，价格较前两家酒店便宜；北门出门往街道口走不远有一家汉庭酒店，个人没有亲身住过，据说延续了汉庭一如既往的服务，价格也是同类酒店中最贵的。另外莫泰酒店不远有一家城市快捷酒店，也是连锁酒店，也没用亲身体验过。 &nbsp; &nbsp; &nbsp; 八、生活用具 衣架：建议买20个左右的寸衫架子，因为你需要在衣柜里面挂衣服还要挂你洗的衣服。内衣收纳：女生，不解释。但是我是在超市买的，没得推荐； 蚊帐：在学校超市买的，刚好够长度，但是发现没有什么用，因为开空调了蚊子就少了很多。 床帘：建议买整套的，有绳子或者支架带着的那种。建议买透光性不强的，有益于睡眠； 床头挂的框子：学校超市买的，但是宿管阿姨那里也有卖的。 床垫：不垫睡觉下面就是硬木板，睡着不舒服。 洗脸盆、水桶（洗衣服用的）、牙膏、牙刷、肥皂盒、洗发水、护发素、浴巾、卫生纸、开水瓶、毛巾，这些来了以后到超市买，不要买二手的或者质量差的； 扫帚、拖把、晾衣杆、抹布一个寝室有一个就行了，可以去宿管阿姨那里买二手的； 凉席：不要买质量差的，不然竹子会容易扎着你的皮肤。 鞋架：一般寝室里面会有这个，万一鞋架放不下跟寝室的同学商量一下再买，建议不要军训的时候买； 电热毯：不推荐，容易发生火灾而且还容易跳电闸，属于违规电器，而且现在有空调并不一定需要了。 吊椅：不管是吊椅还是老板椅都比较矮，喜欢到寝室写作业的同学慎重 收纳盒：淘宝上有很多。 防滑垫：军训期间学校路上会有卖的，买了剪成合适长度贴在楼梯上，上床就不膈脚啦； 小台灯：放在桌子上的，可以去宿管阿姨那里买也可以，超市里面会很贵； 吹风机：寝室楼道里会有公用的，把校园卡插进去就可以了，不用买自己的。要买也可以，淘宝上的关键字一定要加个“宿舍”，不然会买到功率比较大的，功率大的要么会跳闸，要么用低档，当然也属于违规电器。煮面锅：吃货的世界怎么能少了它？但是如果你不会做饭或者技术不好就不要买了。同样属于违规电器。 Ps：由于华师军训的时候会对寝室桌面和寝室里面摆的杂物进行限制，建议床帘呀什么的自己斟酌一下，不要太急着买 学习用品 笔、本子什么的我就不说了，直接去学校超市买吧，新生入学会有英语水平测试，记得买2B铅笔和橡皮 从家里带上你的录取通知书、准考证、转户口的记得带上那张纸 一寸免冠照片和两寸的都照两板带着，会有用的。还有，记得都留一张电子版，以后会用上的； 字典什么的不建议带，重不说还用不上，现在好多都用手机查了 军训用品 首先，等到军训的时候那个鞋子鞋底会很薄，建议买便宜的卫生巾垫在鞋子里面，女生的脚一般垫日用的就行了，男生脚大可以垫日用的。或者网上也有卖胶鞋垫的，可以买两双软一点的 防晒：最好涂防晒霜！ 面膜： 女生的刘海最好都别起来，到时候会让你们把头发盘起来的。&nbsp; 建议：从家里带的东西不用太多，主要是被子和床单之类的。夏天的衣服鞋子没得必要带很多。放心，军训不会让你穿自己衣服的，你的漂亮衣服估计没得太多机会穿。而且带太多也带不下，秋天的衣服带几件夏天的也带几件就行了。 &nbsp; （整篇文章就此结束，希望能帮助到即将进入华师的你们，全文编辑风格多样，分别来自初心，10，落落，可乐，Sarah以及一个不知名偷盗过来的内容) &nbsp;]]></content>
      <categories>
        <category>新生入学</category>
      </categories>
      <tags>
        <tag>新生入学</tag>
      </tags>
  </entry>
</search>
