<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qws的个人博客</title>
  <subtitle>Just Try It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sczhaoqi.github.io/"/>
  <updated>2017-08-19T15:09:45.019Z</updated>
  <id>http://sczhaoqi.github.io/</id>
  
  <author>
    <name>QwsOne</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sczhaoqi.github.io/2017/08/19/hello-world/"/>
    <id>http://sczhaoqi.github.io/2017/08/19/hello-world/</id>
    <published>2017-08-19T15:09:45.017Z</published>
    <updated>2017-08-19T15:09:45.019Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OS操作</title>
    <link href="http://sczhaoqi.github.io/2017/01/28/131/"/>
    <id>http://sczhaoqi.github.io/2017/01/28/131/</id>
    <published>2017-01-28T10:53:10.000Z</published>
    <updated>2017-08-20T03:22:53.221Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>进程相关指令<br>ps<br>ps -aux获取当前所有的进程信息(系统,后台)<br>|more //将指令输出的信息分屏显示<br>kill:能够杀掉一个进程(自身权限范围内)<br>kill -9 pid //强行杀掉某个进程</li>
<li>======================================<br>==========shell程序设计===============<br>vi<br>vim是unix类操作系统的文本编辑器<br>vi abc.txt//开始进入vi并创建打开abc.txt文档<br>1.vi 按下i进入编辑模式的insert<br>2.vi 按下esc进入命令状态<br>3.vi 在命令模式下,按下: 进入命令行,可执行如w–存盘,q–退出 :q!//不保存强制退出</li>
<li>Shell程序设计==========================<br>shell是os内核与用户之间的一种接口,是一种命令解释程序,用户指令要通过shell解释成<br>os内核可以执行的命令,而os内核执行的返回结果也要通过shell树春程用户可以读懂的信息在屏幕上<br>用户将一批多条指令集中写在一个程序中,交给shell来执行 shell程序,shell脚本<br>目前在unix类型的操作系统中使用最多的是bash-B shell//shell的一个版本</li>
</ol>
<hr>
<ol>
<li>shell编程基础<br>一.shell变量<br>1.用户自定义的变量:<br>字符型,字符串型.没有专门的数字型的变量<br>复制:变量名=变量值<br>取消赋值:unset<br>set显示所有变量<br>显示变量名 echo $<br>2.系统变量<br>unix系统中的一些系统保留的大写的关键性的变量:PATH//系统搜索目录 PWD …<br>通过env指令,列出当前所有的系统变量.很多系统变量会在一些系统批处理文件中赋值,如:<br>path vi /boot/.bash_profile 是root在系统每次登陆都会执行的批处理配置文件</li>
<li>=================================================================<br>如何运行shell脚本 ./脚本名 参数<br>—————————Linux的shell编程———————-<br>$变量名===&gt;求得变量的值<br>#注释符号<br>1.shell是一种脚本程序<br>shell用户自定义的变量直接赋值,无类型(字符串)–&gt;一般为小写变量名<br>变量名=”值”;<br>优点:方便,无需编译<br>缺点:面对数字型应用时,必须通过特定的操作来进行转换.</li>
<li>位置变量 ========= $0~$9 获用户所输入的参数(紧跟在shell指令后的)<h1 id="特色变量"><a href="#特色变量" class="headerlink" title="$#,$$,$@,$!,$?(特色变量)"></a>$#,$$,$@,$!,$?(特色变量)</h1></li>
<li>控制流<br>条件表达式 [ 正则表达式 ] 左右有空格 ===&gt;[ 表达式1 -关键子 表达式2 ]<br>常用正则表达式关键字<br>-eq 数值相等<br>-ne 数值不等<br>-gt 大于 -ge 大于等于<br>-lt 小于 -le 小于等于</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;进程相关指令&lt;br&gt;ps&lt;br&gt;ps -aux获取当前所有的进程信息(系统,后台)&lt;br&gt;|more //将指令输出的信息分屏显示&lt;br&gt;kill:能够杀掉一个进程(自身权限范围内)&lt;br&gt;kill -9 pid //强行杀掉某个进程&lt;/li&gt;
&lt;li&gt;====
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>html5Canvas绘图</title>
    <link href="http://sczhaoqi.github.io/2016/12/20/html5canvas-e7-bb-98-e5-9b-be/"/>
    <id>http://sczhaoqi.github.io/2016/12/20/html5canvas-e7-bb-98-e5-9b-be/</id>
    <published>2016-12-20T06:30:34.000Z</published>
    <updated>2017-08-20T03:22:53.231Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;!DOCTYPE html&gt;<br>&lt;html lang=”zh”&gt;<br>&lt;head&gt;<br>&lt;meta charset=”utf-8”&gt;<br>&lt;style type=”text/css”&gt;<br>body {<br>text-align: center;<br>}<br>canvas{<br>background:<br>-webkit-linear-gradient(top,transparent39px,blue40px),<br>-webkit-linear-gradient(left,transparent39px,blue40px)<br>;<br>background-size:40px40px;<br>}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;canvas id=”cds” width=”800”height=”600”style=”border:1px solid #c3c3c3”&gt;<br>您的浏览器不支持canvas标签，请改为最新版本的chrome，firefox或Opera浏览器<br>&lt;/canvas&gt;<br>&lt;script type=”text/javascript”&gt;<br>var mc=document.getElementById(“cds”);<br>var w=mc.width;<br>var h=mc.height;<br>var centerw=20;<br>var centerh=h-20;<br>function drawgrid(){<br>var ele=document.getElementById(“cds”);<br>var ctx=ele.getContext(“2d”);<br>var g_h=20;<br>var g_w=20;<br>var g_r=h/g_h;<br>var g_c=w/g_w;<br>//绘图<br>ctx.beginPath();<br>for(var i=0;i&lt;=g_r;i++){<br>ctx.moveTo(0,i<em>g_h);<br>ctx.lineTo(w,i</em>g_h);<br>}<br>for(var i=0;i&lt;=g_c;i++){<br>ctx.moveTo(i<em>g_w,0);<br>ctx.lineTo(i</em>g_w,h);<br>}<br>ctx.lineWidth=0.2;<br>ctx.strokeStyle=”green”;<br>ctx.stroke();<br>};<br>function drawcds(){<br>var c=document.getElementById(“cds”);<br>var ctx=c.getContext(“2d”);</p>
<p>ctx.beginPath();<br>ctx.font=”20px Georgia”;<br>//原点<br>ctx.fillText(“O(0,0)”,centerw,centerh+10);<br>//画出y轴<br>ctx.moveTo(centerw,0);<br>ctx.lineTo(centerw-10,10);<br>ctx.moveTo(centerw,0);<br>ctx.lineTo(centerw+10,10);<br>ctx.moveTo(centerw,0);<br>ctx.lineTo(centerw,h);<br>ctx.fillText(“y轴”,20,20);<br>//画出x轴<br>ctx.moveTo(w,centerh);<br>ctx.lineTo(w-10,centerh-10);<br>ctx.moveTo(w,centerh);<br>ctx.lineTo(w-10,centerh+10);<br>ctx.moveTo(0,centerh);<br>ctx.lineTo(w,centerh);<br>ctx.fillText(“x轴”,w-40,h-20);<br>ctx.lineWidth=1;</p>
<p>ctx.strokeStyle=”#000000”;<br>ctx.stroke();<br>};<br>function viewX(x){<br>return x<em>2+centerw;<br>}<br>function viewY(y){<br>return centerh-y</em>2;<br>}<br>function drawtest(){<br>var c=document.getElementById(“cds”);<br>var ctx=c.getContext(“2d”);<br>ctx.moveTo(viewX(0),viewY(0));<br>ctx.lineTo(viewX(100),viewY(100));<br>ctx.lineWidth=1;</p>
<p>ctx.strokeStyle=”#000000”;<br>ctx.stroke();<br>}<br>function init(){<br>drawgrid();<br>drawcds();<br>drawtest();<br>};<br>window.onload=init;<br>&lt;/script&gt;</p>
<p>&lt;/body&gt;<br>&lt;/html&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;&amp;lt;html lang=”zh”&amp;gt;&lt;br&gt;&amp;lt;head&amp;gt;&lt;br&gt;&amp;lt;meta charset=”utf-8”&amp;gt;&lt;br&gt;&amp;lt;style type=”text/css”&amp;gt;&lt;br&gt;body 
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Handler的总结</title>
    <link href="http://sczhaoqi.github.io/2016/09/17/handler-e7-9a-84-e6-80-bb-e7-bb-93/"/>
    <id>http://sczhaoqi.github.io/2016/09/17/handler-e7-9a-84-e6-80-bb-e7-bb-93/</id>
    <published>2016-09-17T02:04:36.000Z</published>
    <updated>2017-08-20T03:22:53.223Z</updated>
    
    <content type="html"><![CDATA[<div class="brief bgF8F8F8"><br><br># Android开发中Handler的经典总结<br><br><div class="msg"></div><br><div class="brieftext"><br><br>当应用程序启动时，Android首先会开启一个主线程(也就是UI线程)，主线程为管理界面中的UI控件，进行事件分发。<br><br></div><br></div><br><div class="content bgF8F8F8 f14"><br><div id="content"><br><br><a href="http://s5.51cto.com/wyfs02/M00/2F/BF/wKioL1OhN5mRGI3xAAA4g3j4V30690.jpg" target="_blank" rel="external"><img src="http://s5.51cto.com/wyfs02/M00/2F/BF/wKioL1OhN5mRGI3xAAA4g3j4V30690.jpg" alt=""></a><br><br><strong>一、Handler的定义：</strong><br><br>主要接受子线程发送的数据， 并用此数据配合主线程更新UI。<br><br>解释：当应用程序启动时，Android首先会开启一个主线程 (也就是UI线程) ， 主线程为管理界面中的UI控件， 进行事件分发， 比如说， 你要是点击一个 Button ，Android会分发事件到Button上，来响应你的操作。  如果此时需要一个耗时的操作，例如: 联网读取数据，    或者读取本地较大的一个文件的时候，你不能把这些操作放在主线程中，如果你放在主线程中的话，界面会出现假死现象， 如果5秒钟还没有完成的话，会收到Android系统的一个错误提示  “强制关闭”。  这个时候我们需要把这些耗时的操作，放在一个子线程中，因为子线程涉及到UI更新，，Android主线程是线程不安全的， 也就是说，更新UI只能在主线程中更新，子线程中操作是危险的。 这个时候，Handler就出现了。，来解决这个复杂的问题 ，由于Handler运行在主线程中(UI线程中)，  它与子线程可以通过Message对象来传递数据， 这个时候，Handler就承担着接受子线程传过来的(子线程用sedMessage()方法传弟)Message对象，(里面包含数据)  ， 把这些消息放入主线程队列中，配合主线程进行更新UI。<br><br><strong>二、Handler一些特点</strong><br><br>handler可以分发Message对象和Runnable对象到主线程中， 每个Handler实例，都会绑定到创建他的线程中(一般是位于主线程)，它有两个作用：<br><br>(1)安排消息或Runnable 在某个主线程中某个地方执行；<br><br>(2)安排一个动作在不同的线程中执行。<br><br>Handler中分发消息的一些方法<br><br>post(Runnable)<br><br>postAtTime(Runnable，long)<br><br>postDelayed(Runnable long)<br><br>sendEmptyMessage(int)<br><br>sendMessage(Message)<br><br>sendMessageAtTime(Message，long)<br><br>sendMessageDelayed(Message，long)<br><br>以上post类方法允许你排列一个Runnable对象到主线程队列中，<br><br>sendMessage类方法， 允许你安排一个带数据的Message对象到队列中，等待更新。<br><br><strong>三、Handler实例</strong><br><br>子类需要继承Hendler类，并重写handleMessage(Message msg) 方法， 用于接受线程数据。<br><br>以下为一个实例，它实现的功能为：通过线程修改界面Button的内容<br><br>1.  <span class="keyword">public</span> <span class="keyword">class</span> MyHandlerActivity <span class="keyword">extends</span> Activity {<br>2.  Button button;<br>3.  MyHandler myHandler;<br>4.5.  <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) {<br>6.  <span class="keyword">super</span>。onCreate(savedInstanceState);<br>7.  setContentView(R。layout。handlertest);<br>8.9.  button = (Button) findViewById(R。id。button);<br>10.  myHandler = <span class="keyword">new</span> MyHandler();<br>11.  <span class="comment">// 当创建一个新的Handler实例时， 它会绑定到当前线程和消息的队列中，开始分发数据</span><br>12.  <span class="comment">// Handler有两个作用， (1) : 定时执行Message和Runnalbe 对象</span><br>13.  <span class="comment">// (2): 让一个动作，在不同的线程中执行。</span><br>14.15.  <span class="comment">// 它安排消息，用以下方法</span><br>16.  <span class="comment">// post(Runnable)</span><br>17.  <span class="comment">// postAtTime(Runnable，long)</span><br>18.  <span class="comment">// postDelayed(Runnable，long)</span><br>19.  <span class="comment">// sendEmptyMessage(int)</span><br>20.  <span class="comment">// sendMessage(Message);</span><br>21.  <span class="comment">// sendMessageAtTime(Message，long)</span><br>22.  <span class="comment">// sendMessageDelayed(Message，long)</span><br>23.24.  <span class="comment">// 以上方法以 post开头的允许你处理Runnable对象</span><br>25.  <span class="comment">//sendMessage()允许你处理Message对象(Message里可以包含数据，)</span><br>26.27.  MyThread m = <span class="keyword">new</span> MyThread();<br>28.  <span class="keyword">new</span> Thread(m)。start();<br>29.  }<br>30.31.  <span class="comment">/<em>*</em></span><br>32.  <span class="comment">     接受消息，处理消息 ，此Handler会与当前主线程一块运行</span><br>33.  <span class="comment">    <em> </em>/</span><br>34.35.  <span class="keyword">class</span> MyHandler <span class="keyword">extends</span> Handler {<br>36.  <span class="keyword">public</span> MyHandler() {<br>37.  }<br>38.39.  <span class="keyword">public</span> MyHandler(Looper L) {<br>40.  <span class="keyword">super</span>(L);<br>41.  }<br>42.43.  <span class="comment">// 子类必须重写此方法，接受数据</span><br>44.  <span class="annotation">@Override</span><br>45.  <span class="keyword">public</span> <span class="keyword">void</span> handleMessage(Message msg) {<br>46.  <span class="comment">// TODO Auto-generated method stub</span><br>47.  Log。d(<span class="string">“MyHandler”</span>， <span class="string">“handleMessage。。。。。。”</span>);<br>48.  <span class="keyword">super</span>。handleMessage(msg);<br>49.  <span class="comment">// 此处可以更新UI</span><br>50.  Bundle b = msg。getData();<br>51.  String color = b。getString(<span class="string">“color”</span>);<br>52.  MyHandlerActivity。<span class="keyword">this</span>。button。append(color);<br>53.54.  }<br>55.  }<br>56.57.  <span class="keyword">class</span> MyThread <span class="keyword">implements</span> Runnable {<br>58.  <span class="keyword">public</span> <span class="keyword">void</span> run() {<br>59.60.  <span class="keyword">try</span> {<br>61.  Thread。sleep(<span class="number">10000</span>);<br>62.  } <span class="keyword">catch</span> (InterruptedException e) {<br>63.  <span class="comment">// TODO Auto-generated catch block</span><br>64.  e。printStackTrace();<br>65.  }<br>66.67.  Log。d(<span class="string">“thread。。。。。。。”</span>， <span class="string">“mThread。。。。。。。。”</span>);<br>68.  Message msg = <span class="keyword">new</span> Message();<br>69.  Bundle b = <span class="keyword">new</span> Bundle();<span class="comment">// 存放数据</span><br>70.  b。putString(<span class="string">“color”</span>， <span class="string">“我的”</span>);<br>71.  msg。setData(b);<br>72.73.  MyHandlerActivity。<span class="keyword">this</span>。myHandler。sendMessage(msg); <span class="comment">// 向Handler发送消息，更新UI</span><br>74.75.  }<br>76.  }<br>77.  }<br></div><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;brief bgF8F8F8&quot;&gt;&lt;br&gt;&lt;br&gt;# Android开发中Handler的经典总结&lt;br&gt;&lt;br&gt;&lt;div class=&quot;msg&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;brieftext&quot;&gt;&lt;br&gt;&lt;br&gt;当应用程序启动时，Andro
    
    </summary>
    
      <category term="Android" scheme="http://sczhaoqi.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>常见题型</title>
    <link href="http://sczhaoqi.github.io/2016/09/17/e5-b8-b8-e8-a7-81-e9-a2-98-e5-9e-8b/"/>
    <id>http://sczhaoqi.github.io/2016/09/17/e5-b8-b8-e8-a7-81-e9-a2-98-e5-9e-8b/</id>
    <published>2016-09-17T01:55:09.000Z</published>
    <updated>2017-08-20T03:22:53.221Z</updated>
    
    <content type="html"><![CDATA[<div class="answer_top_bottom_title"></div><br><div class="answer_top_bottom_a"></div><br><div class="answer_top_bottom_b"><form id="answerRadioId"><br><br>#### category的作用<br><br><div><input name="answer" type="radio">category可以添加新的方法</div><br><div><input name="answer" type="radio">将类的实ps现分散到多个不同文件或多个不同框架中</div><br><div><input name="answer" type="radio">创建对私有方法的前向引用</div>

<h4 id="强制卸载已安装软件需要的参数-rpm-e-–node"><a href="#强制卸载已安装软件需要的参数-rpm-e-–node" class="headerlink" title="强制卸载已安装软件需要的参数   rpm -e –node"></a>强制卸载已安装软件需要的参数  <span style="color: #ff0000;"> rpm -e –node</span></h4><h4 id="BroadcastReceiver作用"><a href="#BroadcastReceiver作用" class="headerlink" title="BroadcastReceiver作用"></a>BroadcastReceiver作用</h4><div>是用来接收广播Intent的</div><br><div class="active">一个广播Inten可以被<span style="color: #ff0000;">多个订阅</span>了此广播的BroadcastReceiver所接收</div><br><div>对有序广播，系统会根据接收者声明的优先级别按顺序逐个执行接收者</div><br><div>接收者声明的优先级别在&lt; intent-filter &gt;的android:priority属性中声明，数值越大优先级别越高</div><br><div></div>

<h4 id="IPv6地址占16个字节-128位-IPv4-32位-4个字节"><a href="#IPv6地址占16个字节-128位-IPv4-32位-4个字节" class="headerlink" title="IPv6地址占16个字节 128位 IPv4 32位 4个字节"></a>IPv6地址占<strong>16</strong>个字节 128位 IPv4 32位 4个字节</h4><p></p></form></div><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;answer_top_bottom_title&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;answer_top_bottom_a&quot;&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;answer_top_bottom_b&quot;&gt;&lt;form id=&quot;answerR
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>赵祺的个人失物招领网站上线了!!</title>
    <link href="http://sczhaoqi.github.io/2016/09/14/e8-b5-b5-e7-a5-ba-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-a4-b1-e7-89-a9-e6-8b-9b-e9-a2-86-e7-bd-91-e7-ab-99-e4-b8-8a-e7-ba-bf-e4-ba-86/"/>
    <id>http://sczhaoqi.github.io/2016/09/14/e8-b5-b5-e7-a5-ba-e7-9a-84-e4-b8-aa-e4-ba-ba-e5-a4-b1-e7-89-a9-e6-8b-9b-e9-a2-86-e7-bd-91-e7-ab-99-e4-b8-8a-e7-ba-bf-e4-ba-86/</id>
    <published>2016-09-14T11:03:26.000Z</published>
    <updated>2017-08-20T03:22:53.218Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.zhaoqi.online/sw/" target="_blank" rel="external">赵祺的个人失物招领网站上线了!!</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.zhaoqi.online/sw/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;赵祺的个人失物招领网站上线了!!&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="公告" scheme="http://sczhaoqi.github.io/categories/%E5%85%AC%E5%91%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Hashmap HashTable</title>
    <link href="http://sczhaoqi.github.io/2016/09/14/hashmap-hashtable/"/>
    <id>http://sczhaoqi.github.io/2016/09/14/hashmap-hashtable/</id>
    <published>2016-09-14T05:12:03.000Z</published>
    <updated>2017-08-20T03:22:53.220Z</updated>
    
    <content type="html"><![CDATA[<p>1,hashmap允许存在null的key,hashtable不允许</p>
<p>2.Hashtable是基于线程的,线程安全,可同步;Hashmap不安全</p>
<p>3.HashTable的默认大小为11 增长为2<em>old+1;’HashMap默认大小为16 增长为2</em>;</p>
<p>4.Hash值的使用 Hashtable直接使用对象的Hash值</p>
<p>HashTable同步时,只允许一个线程对其进行修改</p>
<a id="more"></a>
<p>1.实现HashMap的同步</p>
<p>Map m=Collections.synchronized(new HashMap());</p>
<p>用Collections的synchronized()方法创建同步的map对象,同时封装HashMap的方法</p>
<p>2.解释自定义HashMap的Key伪重复</p>
<p>自定义的对象作为key时,</p>
<p>hashmap 首先检测对象的hashcode()是否相同,在hashcode相同的情况下,继续调用equals()方法判断,此时若相等则返回true,覆盖</p>
<p>即便是,自定义对象作为key时,要注意重写hashCode()方法和equals方法,及toString()方法;</p>
<pre><code>import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

class MyHashKey{
 int id;
 String name;
 public MyHashKey(int id,String name){
 this.id=id;
 this.name=name;
 }
 @Override
 public String toString() {
 return &quot;&quot;+this.id+this.name;
 }
 @Override
 public int hashCode() {
 return (&quot;&quot;+this.id).hashCode();
 }
 @Override
 public boolean equals(Object arg0) {
 MyHashKey myHashKey=(MyHashKey) arg0;
 if (myHashKey.name.equals(this.name)) {
 return true;
 } else {
 return false;
 }
 }
}
public class Main {

 public static void main(String[] args) {
 // TODO Auto-generated method stub
 HashMap&amp;lt;MyHashKey, String&amp;gt; hashMap=new HashMap&amp;lt;MyHashKey, String&amp;gt;();
 hashMap.put(new MyHashKey(1, &quot;key1&quot;), &quot;value1&quot;);
 hashMap.put(new MyHashKey(2, &quot;key2&quot;), &quot;value2&quot;);
 hashMap.put(new MyHashKey(1, &quot;key3&quot;), &quot;value3&quot;);
 for (Iterator iterator = hashMap.entrySet().iterator(); iterator.hasNext();) {
 Map.Entry entry=(Entry) iterator.next();
 MyHashKey key = (MyHashKey) entry.getKey();
 String value=(String) entry.getValue();
 System.out.println(&quot;key=&quot;+key+&quot; value=&quot;+value);
 }
 }

}
`&lt;/pre&gt;
代码解析

1.比较hashcode 即便是int的id的值,对象1,对象2!=对象1,对象3!=对象2 对象3=对象1;这里可以确定对象1,对象2的key不同

2.调用对象3的equals方法,比较对象1,此时返回值为false,说明对象1和对象3的可以不同

![](http://121.42.216.198/wordpress/wp-content/uploads/2016/09/6a0a16b29f3a577fd01f46fbb163535f.png)

如果将对象3改为
&lt;pre class=&quot;pure-highlightjs&quot;&gt;`hashMap.put(new MyHashKey(1, &quot;key1&quot;), &quot;value3&quot;);
</code></pre><p>结果为</p>
<p><img src="http://121.42.216.198/wordpress/wp-content/uploads/2016/09/3ae89eb18ec00871192539e7c36dc93f.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1,hashmap允许存在null的key,hashtable不允许&lt;/p&gt;
&lt;p&gt;2.Hashtable是基于线程的,线程安全,可同步;Hashmap不安全&lt;/p&gt;
&lt;p&gt;3.HashTable的默认大小为11 增长为2&lt;em&gt;old+1;’HashMap默认大小为16 增长为2&lt;/em&gt;;&lt;/p&gt;
&lt;p&gt;4.Hash值的使用 Hashtable直接使用对象的Hash值&lt;/p&gt;
&lt;p&gt;HashTable同步时,只允许一个线程对其进行修改&lt;/p&gt;
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ArrayList Vector LinkedList</title>
    <link href="http://sczhaoqi.github.io/2016/09/14/arraylist-vector-linkedlist/"/>
    <id>http://sczhaoqi.github.io/2016/09/14/arraylist-vector-linkedlist/</id>
    <published>2016-09-14T03:07:48.000Z</published>
    <updated>2017-08-20T03:22:53.218Z</updated>
    
    <content type="html"><![CDATA[<p>共同点:都是可伸缩长度的数组</p>
<p>ArrayList:obj[] array(与vector) 默认扩充长度1.5倍(不提供修改方法) 线程不安全</p>
<p>Vector: 同ArrayList 默认扩充2倍 (提供修改方法) 线程安全 效率低于 ArrayList</p>
<p>LinkedList:双向链表结构,只是方便插入 线程不安全</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;共同点:都是可伸缩长度的数组&lt;/p&gt;
&lt;p&gt;ArrayList:obj[] array(与vector) 默认扩充长度1.5倍(不提供修改方法) 线程不安全&lt;/p&gt;
&lt;p&gt;Vector: 同ArrayList 默认扩充2倍 (提供修改方法) 线程安全 效率低于 ArrayL
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 容器 Collection &amp;&amp; 迭代器Iterator</title>
    <link href="http://sczhaoqi.github.io/2016/09/14/java-e5-ae-b9-e5-99-a8-collection/"/>
    <id>http://sczhaoqi.github.io/2016/09/14/java-e5-ae-b9-e5-99-a8-collection/</id>
    <published>2016-09-14T02:38:19.000Z</published>
    <updated>2017-08-20T03:22:53.215Z</updated>
    
    <content type="html"><![CDATA[<p>分类:<br>List<br>Queue<br>Set<br>Stack<br>Map</p>
<p>常用特点</p>
<p>set 元素不能重复,保证equals的值唯一:常用有HashSet和TreeSet(实现SortedSet,有序的)</p>
<p>List 有序的,可重复的,对插入和删除进行有效的控制:常用的有LinkedList ArrayList Vector</p>
<p>Map key-&gt;value key不同value可以相同:常用有</p>
<p>HashMap //基于散列表,便于查询</p>
<p>TreeMap//基于<a href="http://baike.baidu.com/link?url=r35L5n5QENt_HIbb9UV6BBEPv3fmdSSe61LYb-bT-WlqvDr0hlbpSFvjw4GYtKeeuVOxyxR--yDM4n_LCepJzK" target="_blank" rel="external">红黑树,</a>按需排列</p>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>用于遍历并选择序列中的对象,</p>
<p>用法:序列对象.Iterator()方法 返回一个Iterator的对象,Iterator对象集合可以对其进行hasNext(),next();获取其中的OBJ,同时可以remove()将取出的对象从源集合对象中移除</p>
<p>注意:在Iterator遍历过程中不要使用其他的操作,改变ModCount,否则会抛出异常(只限使用Iterator对象的remove()方法)</p>
<p>引申:ListIterator支持左右遍历和元素的修改</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分类:&lt;br&gt;List&lt;br&gt;Queue&lt;br&gt;Set&lt;br&gt;Stack&lt;br&gt;Map&lt;/p&gt;
&lt;p&gt;常用特点&lt;/p&gt;
&lt;p&gt;set 元素不能重复,保证equals的值唯一:常用有HashSet和TreeSet(实现SortedSet,有序的)&lt;/p&gt;
&lt;p&gt;List 有序
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>java NextInt() 后 取出NextLine();</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/92/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/92/</id>
    <published>2016-09-13T13:13:18.000Z</published>
    <updated>2017-08-20T03:22:53.218Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>在调用了nextInt()后，我们可以先调用一次nextLine(),将该行剩下的内容抛弃；</p>
<p>int option = input<span class="hljs-preprocessor">.nextInt</span>()<span class="hljs-comment">;</span><br>input<span class="hljs-preprocessor">.nextLine</span>()<span class="hljs-comment">;  // Consume newline left-over</span><br>String str1 = input<span class="hljs-preprocessor">.nextLine</span>()<span class="hljs-comment">;</span>`</p>
<div class="save_code tracking-ad" data-mod="popu_249"></div>
</li>
<li><p>全部都使用nextLine()读入，然后将其读入的数据转换为Integer。<br><pre class="prettyprint">`<span class="hljs-built_in">int</span> <span class="hljs-built_in">option</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> {</pre></p>
<pre><code>&lt;span class=&quot;hljs-built_in&quot;&gt;option&lt;/span&gt; = Integer.parseInt(input.nextLine());
</code></pre><p>} catch (NumberFormatException e) {</p>
<pre><code>e.printStackTrace();
</code></pre><p>}<br>String str1 = input.nextLine();</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在调用了nextInt()后，我们可以先调用一次nextLine(),将该行剩下的内容抛弃；&lt;/p&gt;
&lt;p&gt;int option = input&lt;span class=&quot;hljs-preprocessor&quot;&gt;.nextInt&lt;/span&gt;()&lt;span c
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/e6-8e-92-e5-ba-8f/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/e6-8e-92-e5-ba-8f/</id>
    <published>2016-09-13T08:58:16.000Z</published>
    <updated>2017-08-20T03:22:53.216Z</updated>
    
    <content type="html"><![CDATA[<p>1. 快速排序</p>
<p><strong>介绍：</strong></p>
<p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 <em>n</em> 个项目要<strong>Ο</strong>(<em>n</em> log <em>n</em>)次比较。在最坏状况下则需要<strong>Ο</strong>(<em>n</em><sup>2</sup>)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他<strong>Ο</strong>(<em>n</em> log <em>n</em>) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来，且在大部分真实世界的数据，可以决定设计的选择，减少所需时间的二次方项之可能性。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>从数列中挑出一个元素，称为 “基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br><strong>排序效果：</strong></li>
</ol>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
<p>&nbsp;</p>
<h2 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2. 归并排序"></a>2. 归并排序</h2><p><strong>介绍：</strong></p>
<p>归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用</p>
<p><strong>步骤：</strong></p>
<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针达到序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾<br><strong>排序效果：</strong></li>
</ol>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms2.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms2.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
<p>&nbsp;</p>
<h2 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3. 堆排序"></a>3. 堆排序</h2><p><strong>介绍：</strong></p>
<p>堆积排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足<em>堆性质</em>：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p><strong>步骤：</strong></p>
<p>（比较复杂，自己上网查吧）</p>
<p><strong>排序效果：</strong></p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms3.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms3.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
<p>&nbsp;</p>
<h2 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h2><p><strong>介绍：</strong></p>
<p>选择排序(Selection sort)是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。以此类推，直到所有元素均排序完毕。</p>
<p><strong>排序效果：</strong></p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms4.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms4.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
<p>&nbsp;</p>
<h3 id="5-冒泡排序"><a href="#5-冒泡排序" class="headerlink" title="5. 冒泡排序"></a>5. 冒泡排序</h3><p><strong>介绍：</strong></p>
<p>冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br><strong>排序效果：</strong></li>
</ol>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms5.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms5.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
<p>&nbsp;</p>
<h2 id="6-插入排序"><a href="#6-插入排序" class="headerlink" title="6. 插入排序"></a>6. 插入排序</h2><p><strong>介绍：</strong></p>
<p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置中</li>
<li>重复步骤2<br><strong>排序效果：</strong></li>
</ol>
<p>（暂无）</p>
<p>&nbsp;</p>
<h2 id="7-希尔排序"><a href="#7-希尔排序" class="headerlink" title="7. 希尔排序"></a>7. 希尔排序</h2><p><strong>介绍：</strong></p>
<p>希尔排序，也称递减增量排序算法，是插入排序的一种高速而稳定的改进版本。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<p>1、插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率</p>
<p>2、但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位&gt;</p>
<p><strong>排序效果：</strong></p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms6.gif" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2012/01/Visual-and-intuitive-feel-of-7-common-sorting-algorithms6.gif" alt="视觉直观感受7种常用排序算法" title="视觉直观感受7种常用排序算法"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1. 快速排序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 &lt;em&gt;n&lt;/em&gt; 个项目要&lt;strong&gt;Ο&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt;)次比
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA 运行环境</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/java-e8-bf-90-e8-a1-8c-e7-8e-af-e5-a2-83/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/java-e8-bf-90-e8-a1-8c-e7-8e-af-e5-a2-83/</id>
    <published>2016-09-13T08:31:59.000Z</published>
    <updated>2017-08-20T03:22:53.215Z</updated>
    
    <content type="html"><![CDATA[<p>java从上至下的运行环境:</p>
<p>java JRE/JVM OS 硬件</p>
<p>java源代码 编译器–&gt;java字节码 .class文件-&gt;jvm执行</p>
<p>java执行方式</p>
<p>1,即时编译执行:字节码全部编译成机器码,再执行</p>
<p>2.解释执行 :编译器执行一小段代码,来完成java字节码的所有操作</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java从上至下的运行环境:&lt;/p&gt;
&lt;p&gt;java JRE/JVM OS 硬件&lt;/p&gt;
&lt;p&gt;java源代码 编译器–&amp;gt;java字节码 .class文件-&amp;gt;jvm执行&lt;/p&gt;
&lt;p&gt;java执行方式&lt;/p&gt;
&lt;p&gt;1,即时编译执行:字节码全部编译成机器码,再执
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA对象持久化方式</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/java-e5-af-b9-e8-b1-a1-e6-8c-81-e4-b9-85-e5-8c-96-e6-96-b9-e5-bc-8f/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/java-e5-af-b9-e8-b1-a1-e6-8c-81-e4-b9-85-e5-8c-96-e6-96-b9-e5-bc-8f/</id>
    <published>2016-09-13T08:28:42.000Z</published>
    <updated>2017-08-20T03:22:53.212Z</updated>
    
    <content type="html"><![CDATA[<p>1.序列化(serialization)</p>
<p>serializable 中static 的对象/变量不被序列化</p>
<p>一般用于网络,数据库,文件存储的保存</p>
<p>2.外部序列化(Externalizable接口)</p>
<p>需要完成读写过程,自由度更高</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.序列化(serialization)&lt;/p&gt;
&lt;p&gt;serializable 中static 的对象/变量不被序列化&lt;/p&gt;
&lt;p&gt;一般用于网络,数据库,文件存储的保存&lt;/p&gt;
&lt;p&gt;2.外部序列化(Externalizable接口)&lt;/p&gt;
&lt;p&gt;需要完成读写过程,自
    
    </summary>
    
      <category term="新生入学" scheme="http://sczhaoqi.github.io/categories/%E6%96%B0%E7%94%9F%E5%85%A5%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>专有名词</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/e4-b8-93-e6-9c-89-e5-90-8d-e8-af-8d/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/e4-b8-93-e6-9c-89-e5-90-8d-e8-af-8d/</id>
    <published>2016-09-13T07:30:03.000Z</published>
    <updated>2017-08-20T03:22:53.213Z</updated>
    
    <content type="html"><![CDATA[<p>NIO 非阻塞IO</p>
<p>多线程操作时,进程阻塞(等待某个条件的发生),耗费大量的上下文栈空间,降低运行效率</p>
<p>NIO原理:通过selector.channel.buffer实现非阻塞的IO操作</p>
<p>通过selector 来轮询channel注册的事件是否发生,对应传回selection的对象,可以用buffer来存储数据,不需要切换上下文,已不需要压弹栈</p>
<p>具有较高的执行效率</p>
<p><img src="http://121.42.216.198/wordpress/wp-content/uploads/2016/09/IMG_20160913_152231-300x225.jpg" alt="img_20160913_152231"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NIO 非阻塞IO&lt;/p&gt;
&lt;p&gt;多线程操作时,进程阻塞(等待某个条件的发生),耗费大量的上下文栈空间,降低运行效率&lt;/p&gt;
&lt;p&gt;NIO原理:通过selector.channel.buffer实现非阻塞的IO操作&lt;/p&gt;
&lt;p&gt;通过selector 来轮询channel注
    
    </summary>
    
      <category term="新生入学" scheme="http://sczhaoqi.github.io/categories/%E6%96%B0%E7%94%9F%E5%85%A5%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>IO流的实现机制</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/io-e6-b5-81-e7-9a-84-e5-ae-9e-e7-8e-b0-e6-9c-ba-e5-88-b6/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/io-e6-b5-81-e7-9a-84-e5-ae-9e-e7-8e-b0-e6-9c-ba-e5-88-b6/</id>
    <published>2016-09-13T05:31:13.000Z</published>
    <updated>2017-08-20T03:22:53.216Z</updated>
    
    <content type="html"><![CDATA[<p>输入输出:抽象流</p>
<p>基类InputStream</p>
<p>常用:StringBufferInputStream FileinputStream FilterInputSream(封装类的基类)</p>
<p>java中的流分类</p>
<p>字符流</p>
<p>继承制writer/reader</p>
<p>字节流</p>
<p>继承自InputStream/OutputStream</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输入输出:抽象流&lt;/p&gt;
&lt;p&gt;基类InputStream&lt;/p&gt;
&lt;p&gt;常用:StringBufferInputStream FileinputStream FilterInputSream(封装类的基类)&lt;/p&gt;
&lt;p&gt;java中的流分类&lt;/p&gt;
&lt;p&gt;字符流&lt;/p&gt;

    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Exception</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/exception/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/exception/</id>
    <published>2016-09-13T05:15:44.000Z</published>
    <updated>2017-08-20T03:22:53.209Z</updated>
    
    <content type="html"><![CDATA[<p>Error 和Exception同属Thorwable的子类</p>
<p>Error 直接退出程序</p>
<p>Exception分两类</p>
<p>1.检查异常</p>
<p>IOException SQLException</p>
<p>2.运行异常</p>
<p>NullPointException.ArithmeticException等</p>
<p>异常若不处理,则会向上抛出,直到处理为止(程序/线程终止)</p>
<p>多线程Thread.run()抛出,单线程main()抛出,主程序抛出,则程序终止</p>
<p>注意事项</p>
<p>1.异常必须先捕获子类,再捕获基类,否则子类不会执行</p>
<p>2.尽早处理</p>
<p>3.自定义异常 继承 Exception</p>
<p>4.异常要么处理,要么抛出</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Error 和Exception同属Thorwable的子类&lt;/p&gt;
&lt;p&gt;Error 直接退出程序&lt;/p&gt;
&lt;p&gt;Exception分两类&lt;/p&gt;
&lt;p&gt;1.检查异常&lt;/p&gt;
&lt;p&gt;IOException SQLException&lt;/p&gt;
&lt;p&gt;2.运行异常&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Finally代码块</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/finally-e4-bb-a3-e7-a0-81-e5-9d-97/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/finally-e4-bb-a3-e7-a0-81-e5-9d-97/</id>
    <published>2016-09-13T04:46:25.000Z</published>
    <updated>2017-08-20T03:22:53.212Z</updated>
    
    <content type="html"><![CDATA[<p>//finally代码的执行性<br>//原则性 1.所有的函数代码一定在return 之前执行<br>//原则性2.finally块一定会执行,(强制退出System.exit除外)<br>//原则性3.finally中的return会覆盖try/catch之中的return<br>//原则性4.try catch中的return 会将返回的对象保存下来,即便是在finally中修改对象值返回结果就会改变<br>//但是如果是非引用类型,则不会对返回结果有任何的影响</p>
<pre><code>public class Test {

@SuppressWarnings(&quot;finally&quot;)
public static int testFinally(){
try {
return 1;
} catch (Exception e) {
// TODO: handle exception
return 0;
}finally{
System.out.println(&quot;finally 执行&quot;);
return -1;
}
}
public static void testFinally3(){
try {
System.out.println(&quot;try 执行&quot;);
System.exit(0);
} catch (Exception e) {
// TODO: handle exception
System.out.println(&quot;catch 执行&quot;);
}finally{
System.out.println(&quot;finally 执行&quot;);
}

}
@SuppressWarnings(&quot;finally&quot;)
public static int testFinally2(){
int m;
try {
m=1;
return m;
} catch (Exception e) {
m=0;
// TODO: handle exception
return m;
}finally{
m=3;
System.out.println(&quot;finally 执行&quot;);
}
}

public static void main(String[] args) {
// TODO Auto-generated method stub
System.out.println(&quot;T1&quot;);
int m=testFinally();
System.out.println(m);
System.out.println(&quot;T2&quot;);
m=testFinally2();
System.out.println(m);
System.out.println(&quot;T3&quot;);
testFinally3();
}

}
</code></pre><p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;//finally代码的执行性&lt;br&gt;//原则性 1.所有的函数代码一定在return 之前执行&lt;br&gt;//原则性2.finally块一定会执行,(强制退出System.exit除外)&lt;br&gt;//原则性3.finally中的return会覆盖try/catch之中的retu
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="http://sczhaoqi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>String StringBuffer StringBuilder StringTokenizer区别</title>
    <link href="http://sczhaoqi.github.io/2016/09/13/string-stringbuffer-stringbuilder-stringtokenizer-e5-8c-ba-e5-88-ab/"/>
    <id>http://sczhaoqi.github.io/2016/09/13/string-stringbuffer-stringbuilder-stringtokenizer-e5-8c-ba-e5-88-ab/</id>
    <published>2016-09-13T02:55:38.000Z</published>
    <updated>2017-08-20T03:22:53.213Z</updated>
    
    <content type="html"><![CDATA[<p>String ,StringBuffer,StringBuilder位于java.lang中不用引入</p>
<p>1.String 字符串 不可变类</p>
<p>执行修改时,会有较多的转换操作,并耗费空间</p>
<pre><code>String s=&quot;hello&quot;;s+=&quot;world&quot;;&amp;lt;===&amp;gt;
StringBuffer sb=new StringBuffer(s);sb.append(&quot;world&quot;);s=sb.tostring();`&lt;/pre&gt;
2.StringBuffer StringBuilder带缓冲区的字符串类

StringBuilder 应对于 单线程的多修改字符串

StringBuffer 安全性更高 多线程的多修改字符串

3.StringTokenizer  位于工具内中
&lt;pre class=&quot;pure-highlightjs&quot;&gt;`java.util.StringTokenizer;

st.hasMoreTokens();

st.nextToken();
</code></pre><p>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;String ,StringBuffer,StringBuilder位于java.lang中不用引入&lt;/p&gt;
&lt;p&gt;1.String 字符串 不可变类&lt;/p&gt;
&lt;p&gt;执行修改时,会有较多的转换操作,并耗费空间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String s=&amp;quot;he
    
    </summary>
    
      <category term="新生入学" scheme="http://sczhaoqi.github.io/categories/%E6%96%B0%E7%94%9F%E5%85%A5%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>java取整</title>
    <link href="http://sczhaoqi.github.io/2016/09/12/java-e5-8f-96-e6-95-b4/"/>
    <id>http://sczhaoqi.github.io/2016/09/12/java-e5-8f-96-e6-95-b4/</id>
    <published>2016-09-12T09:07:15.000Z</published>
    <updated>2017-08-20T03:22:53.209Z</updated>
    
    <content type="html"><![CDATA[<pre><code>System.out.println(&quot;round&quot;+Math.round(1.5));
        System.out.println(&quot;ceil&quot;+Math.ceil(1.5));
        System.out.println(&quot;floor&quot;+Math.floor(1.5));
        System.out.println(&quot;round&quot;+Math.round(-1.5));
        System.out.println(&quot;ceil&quot;+Math.ceil(-1.5));
        System.out.println(&quot;floor&quot;+Math.floor(-1.5));
        System.out.println(&quot;小技巧:退一法&quot;+Math.round(Math.floor(1.5)));`&lt;/pre&gt;
&lt;pre class=&quot;pure-highlightjs&quot;&gt;`设x=1,y=2,z=3, y+=z- -/++x的值是

y+=z- -/++x相当于y=y+z- -/++x
然后相当于y=2+3/2=3
</code></pre><p>&nbsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;System.out.println(&amp;quot;round&amp;quot;+Math.round(1.5));
        System.out.println(&amp;quot;ceil&amp;quot;+Math.ceil(1.5));
        Syste
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="http://sczhaoqi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA浅拷贝&amp;深拷贝</title>
    <link href="http://sczhaoqi.github.io/2016/09/12/java-e6-b5-85-e6-8b-b7-e8-b4-9d-e6-b7-b1-e6-8b-b7-e8-b4-9d/"/>
    <id>http://sczhaoqi.github.io/2016/09/12/java-e6-b5-85-e6-8b-b7-e8-b4-9d-e6-b7-b1-e6-8b-b7-e8-b4-9d/</id>
    <published>2016-09-12T08:49:11.000Z</published>
    <updated>2017-08-20T03:22:53.209Z</updated>
    
    <content type="html"><![CDATA[<p>先看一个demo</p>
<pre><code>public class Test {

    public static void changeString(StringBuffer ss1,StringBuffer ss2){
        ss1.append(&quot;B&quot;);
        ss2=ss1;
    }
    public static void main(String[] args) {
        StringBuffer s1=new StringBuffer(&quot;A&quot;);
        StringBuffer s2=new StringBuffer(&quot;B&quot;);
        changeString(s1, s2);
        System.out.println(s1);
        System.out.println(s2);
    }
}
`&lt;/pre&gt;
运行结果

AB
B

分析:

运行时,s1和s2的地址作为参数传递

ss1存放的s1的地址,ss1.append==s1.append;

ss2=ss1将s1的地址赋给ss2这个临时的地址,对s2的指向没有任何影响

&lt;!--more--&gt;

**另外一个例子**
&lt;pre class=&quot;pure-highlightjs&quot;&gt;`String s1=&quot;abc&quot;;
String s2=&quot;abc&quot;;
String s3=new String(&quot;abc&quot;);
String s4=new String(&quot;abc&quot;);
</code></pre><p>s1,s2的指向实际是一个地址 根据flyweight的设计模式 指向常量区的abc</p>
<p>s1==s2 :true;</p>
<p>s3==s4:false;</p>
<p>s1.equals(s3):true;</p>
<p>==比较内存地址</p>
<p>equals 比较对应地址中的值</p>
<p>hashcode() 比较对象地址</p>
<p>S3,s4则被放入了堆中,它们的指向也就不同,分别指向创建时所分配的内存地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先看一个demo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test {

    public static void changeString(StringBuffer ss1,StringBuffer ss2){
        ss1.append(&amp;
    
    </summary>
    
      <category term="java学习" scheme="http://sczhaoqi.github.io/categories/java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java" scheme="http://sczhaoqi.github.io/tags/java/"/>
    
  </entry>
  
</feed>
